<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        #d3-place-per-time {
            /*min-height: 200px;*/
            padding: 0px;
            margin: 0px;
        }

        .axis path,.axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }

        .bar {
            fill: #33b5e5;
        }

        .bar-failed {
            fill: #CC0000;
            opacity: 0.7;
        }

        .bar-running {
            fill: #ffbb33;
            opacity: 0.8;
        }

        .bar-succeeded {
            fill: #33b5e5;
            opacity: 0.8;
        }

        .bar-killed {
            fill: #669900;
            opacity: 0.7;
        }
    </style>

</head>

<body>

<script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>
<!-- <script type="text/javascript" src="http://static.mentful.com/gantt-chart-d3v2.js"></script> -->
<script type="text/javascript">
    d3.gantt = function() {
        var FIT_TIME_DOMAIN_MODE = "fit";
        var FIXED_TIME_DOMAIN_MODE = "fixed";

        var margin = {
            top : 0,
            right : 30,
            bottom : 20,
            left : 30
        };
        var selector = '#d3-place-per-time';
        var timeDomainStart = d3.time.day.offset(new Date(),-3);
        var timeDomainEnd = d3.time.hour.offset(new Date(),+3);
        var timeDomainMode = FIT_TIME_DOMAIN_MODE;// fixed or fit
        var taskTypes = [];
        var taskStatus = [];
        var height = document.body.clientHeight - margin.top - margin.bottom-10;
        var width = document.body.clientWidth - margin.right - margin.left-5;


        var tickFormat = "%H:%M";

        var keyFunction = function(d) {
            return d.startDate + d.taskName + d.endDate;
        };

        var rectTransform = function(d) {
            return "translate(" + x(d.startDate) + "," + y(d.taskName) + ")";
        };

        var x = d3.time.scale().domain([ timeDomainStart, timeDomainEnd ]).range([ 0, width ]).clamp(true);

        var y = d3.scale.ordinal().domain(taskTypes).rangeRoundBands([ 0, height - margin.top - margin.bottom ], .1);

        var xAxis = d3.svg.axis().scale(x).orient("bottom").tickFormat(d3.time.format(tickFormat)).tickSubdivide(true)
                .tickSize(8).tickPadding(8);

        var yAxis = d3.svg.axis().scale(y).orient("left").tickSize(0);

        var initTimeDomain = function(tasks) {
            if (timeDomainMode === FIT_TIME_DOMAIN_MODE) {
                if (tasks === undefined || tasks.length < 1) {
                    timeDomainStart = d3.time.day.offset(new Date(), -3);
                    timeDomainEnd = d3.time.hour.offset(new Date(), +3);
                    return;
                }
                tasks.sort(function(a, b) {
                    return a.endDate - b.endDate;
                });
                timeDomainEnd = tasks[tasks.length - 1].endDate;
                tasks.sort(function(a, b) {
                    return a.startDate - b.startDate;
                });
                timeDomainStart = tasks[0].startDate;
            }
        };

        var initAxis = function() {
            x = d3.time.scale().domain([ timeDomainStart, timeDomainEnd ]).range([ 0, width ]).clamp(true);
            y = d3.scale.ordinal().domain(taskTypes).rangeRoundBands([ 0, height - margin.top - margin.bottom ], .1);
            xAxis = d3.svg.axis().scale(x).orient("bottom").tickFormat(d3.time.format(tickFormat)).tickSubdivide(true)
                    .tickSize(8).tickPadding(8);

            yAxis = d3.svg.axis().scale(y).orient("left").tickSize(0);
        };

        function gantt(tasks) {

            initTimeDomain(tasks);
            initAxis();

            var svg = d3.select(selector)
                    .append("svg")
                    .attr("class", "chart")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("class", "gantt-chart")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .attr("transform", "translate(" + margin.left + ", " + margin.top + ")");

            svg.selectAll(".chart")
                    .data(tasks, keyFunction).enter()
                    .append("rect")
                    .attr("rx", 5)
                    .attr("ry", 5)
                    .attr("class", function(d){
                        if(taskStatus[d.status] == null){ return "bar";}
                        return taskStatus[d.status];
                    })
                    .attr("y", 0)
                    .attr("transform", rectTransform)
                    .attr("height", function(d) { return y.rangeBand()-20; })
                    .attr("width", function(d) {
                        return (x(d.endDate) - x(d.startDate));
                    });


            svg.append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0, " + (height - margin.top - margin.bottom) + ")")
                    .transition()
                    .call(xAxis);

            svg.append("g").attr("class", "y axis").transition().call(yAxis);

            return gantt;

        };

        gantt.redraw = function(tasks) {

            initTimeDomain(tasks);
            initAxis();

            var svg = d3.select(".chart");

            var ganttChartGroup = svg.select(".gantt-chart");
            var rect = ganttChartGroup.selectAll("rect").data(tasks, keyFunction);

            rect.enter()
                    .insert("rect",":first-child")
                    .attr("rx", 5)
                    .attr("ry", 5)
                    .attr("class", function(d){
                        if(taskStatus[d.status] == null){ return "bar";}
                        return taskStatus[d.status];
                    })
                    .transition()
                    .attr("y", 0)
                    .attr("transform", rectTransform)
                    .attr("height", function(d) { return y.rangeBand(); })
                    .attr("width", function(d) {
                        return (x(d.endDate) - x(d.startDate));
                    });

            rect.transition()
                    .attr("transform", rectTransform)
                    .attr("height", function(d) { return y.rangeBand(); })
                    .attr("width", function(d) {
                        return (x(d.endDate) - x(d.startDate));
                    });

            rect.exit().remove();

            svg.select(".x").transition().call(xAxis);
            svg.select(".y").transition().call(yAxis);

            return gantt;
        };

        gantt.margin = function(value) {
            if (!arguments.length)
                return margin;
            margin = value;
            return gantt;
        };

        gantt.timeDomain = function(value) {
            if (!arguments.length)
                return [ timeDomainStart, timeDomainEnd ];
            timeDomainStart = +value[0], timeDomainEnd = +value[1];
            return gantt;
        };

        /**
         * @param {string}
         *                vale The value can be "fit" - the domain fits the data or
         *                "fixed" - fixed domain.
         */
        gantt.timeDomainMode = function(value) {
            if (!arguments.length)
                return timeDomainMode;
            timeDomainMode = value;
            return gantt;

        };

        gantt.taskTypes = function(value) {
            if (!arguments.length)
                return taskTypes;
            taskTypes = value;
            return gantt;
        };

        gantt.taskStatus = function(value) {
            if (!arguments.length)
                return taskStatus;
            taskStatus = value;
            return gantt;
        };

        gantt.width = function(value) {
            if (!arguments.length)
                return width;
            width = +value;
            return gantt;
        };

        gantt.height = function(value) {
            if (!arguments.length)
                return height;
            height = +value;
            return gantt;
        };

        gantt.tickFormat = function(value) {
            if (!arguments.length)
                return tickFormat;
            tickFormat = value;
            return gantt;
        };

        gantt.selector = function(value) {
            if (!arguments.length)
                return selector;
            selector = value;
            return gantt;
        };

        return gantt;
    };

    var tasks = [
        {"startDate":new Date("Sun Dec 08 09:00:00 EST 2012"),"endDate":new Date("Sun Dec 08 12:30:00 EST 2012"),"taskName":"EJ","status":"OFFICE"},
        {"startDate":new Date("Sun Dec 08 13:30:00 EST 2012"),"endDate":new Date("Sun Dec 08 16:30:00 EST 2012"),"taskName":"EJ","status":"OFFICE"},
        {"startDate":new Date("Sun Dec 08 16:30:00 EST 2012"),"endDate":new Date("Sun Dec 08 18:30:00 EST 2012"),"taskName":"EJ","status":"OUTSIDE"},
        {"startDate":new Date("Sun Dec 08 20:00:00 EST 2012"),"endDate":new Date("Sun Dec 08 22:00:00 EST 2012"),"taskName":"EJ","status":"OVERTIME"},

        {"startDate":new Date("Sun Dec 08 09:30:00 EST 2012"),"endDate":new Date("Sun Dec 08 12:30:00 EST 2012"),"taskName":"SY","status":"OFFICE"},
        {"startDate":new Date("Sun Dec 08 13:30:00 EST 2012"),"endDate":new Date("Sun Dec 08 18:00:00 EST 2012"),"taskName":"SY","status":"OFFICE"},
        {"startDate":new Date("Sun Dec 08 19:00:00 EST 2012"),"endDate":new Date("Sun Dec 08 22:00:00 EST 2012"),"taskName":"SY","status":"OVERTIME"},

        {"startDate":new Date("Sun Dec 08 09:00:00 EST 2012"),"endDate":new Date("Sun Dec 08 22:00:00 EST 2012"),"taskName":"DG","status":"BTRIP"},

        {"startDate":new Date("Sun Dec 08 09:00:00 EST 2012"),"endDate":new Date("Sun Dec 08 12:30:00 EST 2012"),"taskName":"XX","status":"OUTSIDE"},
        {"startDate":new Date("Sun Dec 08 13:30:00 EST 2012"),"endDate":new Date("Sun Dec 08 18:00:00 EST 2012"),"taskName":"XX","status":"OFFICE"},

        {"startDate":new Date("Sat Dec 08 09:00:00 EST 2012"),"endDate":new Date("Sun Dec 08 12:30:00 EST 2012"),"taskName":"QQ","status":"OFFICE"},
        {"startDate":new Date("Sat Dec 08 13:30:00 EST 2012"),"endDate":new Date("Sun Dec 08 18:00:00 EST 2012"),"taskName":"QQ","status":"OFFICE"}
    ];

    var taskStatus = {
        "OUTSIDE" : "bar",
        "OVERTIME" : "bar-failed",
        "OFFICE" : "bar-running",
        "BTRIP" : "bar-killed"
    };

    var taskNames = [ "SY", "DG", "EJ", "QQ", "XX" ];

    // tasks.sort(function(a, b) {
    //     return a.endDate - b.endDate;
    // });
    var maxDate = tasks[tasks.length - 1].endDate;
    // tasks.sort(function(a, b) {
    //     return a.startDate - b.startDate;
    // });
    // var minDate = tasks[0].startDate;

    var format = "%H";

    var gantt = d3.gantt().taskTypes(taskNames).taskStatus(taskStatus).tickFormat(format);
    gantt(tasks);
</script>

</body>
</html>